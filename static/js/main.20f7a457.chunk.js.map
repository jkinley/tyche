{"version":3,"sources":["components/navbar/index.jsx","components/planets/planet.jsx","components/planets/index.jsx","components/people/person.jsx","components/people/index.jsx","App.js","index.js"],"names":["NavBar","setPage","className","onClick","Planet","planet","name","climate","terrain","Planets","React","useState","page","useQuery","fetch","then","res","json","fetchPlanets","keepPreviousData","isLoading","isError","data","error","isFetching","isPreviousData","console","log","type","color","height","width","_","map","results","Person","person","hair_color","fetchPeople","a","People","status","queryClient","QueryClient","App","QueryClientProvider","client","Date","getFullYear","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAaeA,EAVA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEf,OACE,sBAAKC,UAAU,SAAf,UACE,wBAAQA,UAAU,MAAMC,QAAS,kBAAMF,EAAQ,YAA/C,qBACA,wBAAQC,UAAU,MAAMC,QAAS,kBAAMF,EAAQ,WAA/C,wB,kDCMSG,EAZA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACE,sBAAKH,UAAU,OAAf,UACE,6BAAKG,EAAOC,OACZ,+BACE,2CAAcD,EAAOE,QAArB,OACA,2CAAcF,EAAOG,QAArB,cC0COC,EAtCC,WACd,MAAwBC,IAAMC,SAAS,GAAvC,mBAAOC,EAAP,KAKA,GALA,KAWoBC,YAAS,CAAC,UAAWD,IAAO,kBAT3B,kBAAcE,MAAM,uCAAD,OAAnB,uDAAQ,IAC5BC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAQmCC,CAAaN,KAAO,CAACO,kBAAkB,KAL3FC,EADF,EACEA,UACAC,EAFF,EAEEA,QAEAC,GAJF,EAGEC,MAHF,EAIED,MAJF,EAKEE,WALF,EAMEC,eAGF,OADAC,QAAQC,IAAIL,GAEV,qCACE,yCAEEF,EACA,cAAC,IAAD,CAAQQ,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,IAAK7B,UAAU,iBACrEmB,EACF,wDAEA,qBAAKnB,UAAU,eAAf,SACG8B,IAAEC,IAAIX,EAAKY,SAAS,SAAC7B,GAClB,OACE,cAAC,EAAD,CAA0BA,OAAQA,GAArBA,EAAOC,e,yBCzBrB6B,G,MAZA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACE,sBAAKlC,UAAU,OAAf,UACE,6BAAKkC,EAAO9B,OACZ,+BACE,8CAAiB8B,EAAOC,WAAxB,OACA,0CAAaD,EAAON,OAApB,eCDFQ,EAAW,uCAAG,4BAAAC,EAAA,sEACAzB,MAAM,gCADN,cACZE,EADY,yBAEXA,EAAIC,QAFO,2CAAH,qDA6BFuB,EAxBA,WACb,MAAuB3B,YAAS,SAAUyB,GAAnChB,EAAP,EAAOA,KAAMmB,EAAb,EAAaA,OAEb,OACE,qCACA,wCACa,YAAXA,GACA,cAAC,IAAD,CAAQb,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,IAAK7B,UAAU,iBAG5D,UAAXuC,GAAwB,wDACb,YAAXA,GACA,qBAAKvC,UAAU,eAAf,SACG8B,IAAEC,IAAIX,EAAKY,SAAS,SAACE,GAClB,OACE,cAAC,EAAD,CAA0BA,OAAQA,GAArBA,EAAO9B,e,wBCpB5BoC,EAAc,IAAIC,IA8BTC,MA5Bf,WACE,MAAwBlC,IAAMC,SAAS,WAAvC,mBAAOC,EAAP,KAAaX,EAAb,KAEA,OACE,eAAC4C,EAAA,EAAD,CAAqBC,OAAQJ,EAA7B,UACE,sBAAKxC,UAAU,MAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,4BACA,cAAC,EAAD,CAAQD,QAASA,SAGrB,sBAAMC,UAAU,OAAhB,SACE,qBAAKA,UAAU,YAAf,SACW,YAATU,EAAqB,cAAC,EAAD,IAAc,cAAC,EAAD,QAGvC,wBAAQV,UAAU,SAAlB,SACE,8BACE,qDAAyB,IAAI6C,MAAOC,cAApC,+BAIN,cAAC,qBAAD,CAAoBC,eAAe,QC3BzCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.20f7a457.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nconst NavBar = ({setPage}) => {\n\n  return ( \n    <nav className=\"navbar\">\n      <button className=\"btn\" onClick={() => setPage('planets')}>Planets</button>\n      <button className=\"btn\" onClick={() => setPage('people')}>People</button>\n    </nav>\n  );\n}\n \nexport default NavBar;","import React from 'react';\n\nconst Planet = ({planet}) => {\n  return ( \n    <div className=\"card\">\n      <h2>{planet.name}</h2>\n      <ul>\n        <li>Climate: {planet.climate} </li>\n        <li>Terrain: {planet.terrain} </li>\n      </ul>\n    </div>\n   );\n}\n \nexport default Planet;","import React from 'react';\nimport { useQuery } from 'react-query';\nimport _ from 'lodash';\nimport './index.scss';\nimport Loader from 'react-loader-spinner';\nimport Planet from './planet';\n\n// const fetchPlanets = async (key, page) => {\n//   const res = await fetch(`http://swapi.dev/api/planets/?page=${page}`);\n//   return res.json();\n// };\n\nconst Planets = () => {\n  const [page, setPage] = React.useState(1);\n\n  const fetchPlanets = (page = 1) => fetch(`https://swapi.dev/api/planets/?page=${page}`)\n  .then((res) => res.json());\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData} = useQuery(['planets', page], () => fetchPlanets(page), {keepPreviousData: true});\n  \n  console.log(data);\n  return (  \n    <>\n      <h1>Planets</h1>\n\n      { isLoading ? ( \n        <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} className=\"loading-wrap\"/>\n      ) : isError ? (\n        <div>Error loading data...</div>\n      ) : (\n        <div className=\"content-grid\">\n          {_.map(data.results, (planet) => {\n              return (\n                <Planet key={planet.name} planet={planet} />\n              );\n            })}\n        </div>\n      )}\n\n      {/* {isFetching ? <span> Fetching data...</span> : null}{' '} */}\n    </>\n  );\n}\n\nexport default Planets;","import React from 'react';\n\nconst Person = ({person}) => {\n  return ( \n    <div className=\"card\">\n      <h2>{person.name}</h2>\n      <ul>\n        <li>Hair color: {person.hair_color} </li>\n        <li>Height: {person.height} </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Person;","import React from 'react';\nimport { useQuery } from 'react-query';\nimport _ from 'lodash';\nimport './index.scss';\nimport Loader from 'react-loader-spinner';\nimport Person from './person';\n\nconst fetchPeople = async () => {\n  const res = await fetch('http://swapi.dev/api/people/');\n  return res.json();\n};\n\nconst People = () => {\n  const {data, status} = useQuery('people', fetchPeople);\n\n  return (  \n    <>\n    <h1>People</h1>\n    { status === 'loading' && ( \n      <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} className=\"loading-wrap\"/>\n      )\n    }\n    { status === 'error' && ( <div>Erro loading data... </div> )}\n    { status === 'success' && (\n      <div className=\"content-grid\">\n        {_.map(data.results, (person) => {\n            return (\n              <Person key={person.name} person={person} />\n            );\n          })}\n      </div>\n    )}\n    </>\n  );\n}\n \nexport default People;\n","import React from 'react';\nimport NavBar from './components/navbar';\nimport Planets from './components/planets';\nimport People from './components/people';\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  const [page, setPage] = React.useState('planets');\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"App\">\n        <header className=\"header\">\n          <div className=\"container\">\n            <div className=\"logo\">Star Wars Info</div>\n            <NavBar setPage={setPage} />\n          </div>\n        </header>\n        <main className=\"main\">\n          <div className=\"container\">\n          { page === 'planets' ? <Planets /> : <People />}\n          </div>\n        </main>\n        <footer className=\"footer\">\n          <div>\n            <small>Copyright &copy; {new Date().getFullYear()} Gizmo Creations. </small>\n          </div>\n        </footer>\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}